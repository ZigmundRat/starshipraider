/***********************************************************************************************************************
*                                                                                                                      *
* STARSHIPRAIDER v0.1                                                                                                  *
*                                                                                                                      *
* Copyright (c) 2020 Andrew D. Zonenberg                                                                               *
* All rights reserved.                                                                                                 *
*                                                                                                                      *
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the     *
* following conditions are met:                                                                                        *
*                                                                                                                      *
*    * Redistributions of source code must retain the above copyright notice, this list of conditions, and the         *
*      following disclaimer.                                                                                           *
*                                                                                                                      *
*    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       *
*      following disclaimer in the documentation and/or other materials provided with the distribution.                *
*                                                                                                                      *
*    * Neither the name of the author nor the names of any contributors may be used to endorse or promote products     *
*      derived from this software without specific prior written permission.                                           *
*                                                                                                                      *
* THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   *
* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL *
* THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES        *
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR       *
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                                                          *
*                                                                                                                      *
***********************************************************************************************************************/

#include <stm32fxxx.h>
#include <string.h>
#include "AMG240160P.h"

//8x16 character cell
struct CharacterCell8x15
{
	uint8_t pixels[15];
};

//8x16 bitmap font based on https://github.com/kmar/Sweet16Font/blob/master/Sweet16mono_bmfont_0.png
//Shrunk slightly (last blank row of pixels deleted to get an 8x15 cell size)
//Need to specify section!
//For some reason gcc was trying to put it in .data, not .rodata.
static const CharacterCell8x15 g_bitmapFont8x16[256] __attribute__((section(".rodata"))) =
{
	{ 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 },		//00-07
	{ 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 },		//08-0f
	{ 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 },		//10-17
	{ 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 }, { 0 },		//18-1f

	{ 0 },																							//0x20 = ' '
	{ 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00 },	//0x21 = '!'
	{ 0x00, 0x00, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//0x22 = '"'
	{ 0x00, 0x00, 0x00, 0x24, 0x24, 0x7e, 0x24, 0x24, 0x24, 0x7e, 0x24, 0x24, 0x00, 0x00, 0x00 },	//0x23 = '#'
	{ 0x00, 0x08, 0x1c, 0x22, 0x22, 0x02, 0x1c, 0x20, 0x20, 0x22, 0x22, 0x1c, 0x08, 0x00, 0x00 },	//0x24 = '$'
	{ 0x00, 0x00, 0x02, 0x05, 0x45, 0x22, 0x10, 0x08, 0x04, 0x22, 0x51, 0x50, 0x20, 0x00, 0x00 },	//0x25 = '%'
	{ 0x00, 0x00, 0x0c, 0x12, 0x12, 0x12, 0x4c, 0x4a, 0x31, 0x21, 0x31, 0x4e, 0x00, 0x00, 0x00 },	//0x26 = '&'
	{ 0x00, 0x00, 0x10, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//0x27 = '''
	{ 0x00, 0x00, 0x10, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x10, 0x00, 0x00 },	//0x28 = '('
	{ 0x00, 0x00, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, 0x00, 0x00 },	//0x29 = ')'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x18, 0x7e, 0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00 },	//0x2a = '*'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 },	//0x2b = '+'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x08, 0x00, 0x00 },	//0x2c = ','
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//0x2d = '-'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00 },	//0x2e = '.'
	{ 0x00, 0x00, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00 },	//0x2f = '/'

	{ 0x00, 0x00, 0x3c, 0x42, 0x62, 0x52, 0x52, 0x4a, 0x4a, 0x46, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x30 = '0'
	{ 0x00, 0x00, 0x20, 0x30, 0x28, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00 },	//0x31 = '1'
	{ 0x00, 0x00, 0x3c, 0x42, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x7e, 0x00, 0x00, 0x00 },	//0x32 = '2'
	{ 0x00, 0x00, 0x3c, 0x42, 0x40, 0x40, 0x38, 0x40, 0x40, 0x40, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x33 = '3'
	{ 0x00, 0x00, 0x20, 0x30, 0x28, 0x24, 0x22, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00 },	//0x34 = '4'
	{ 0x00, 0x00, 0x7e, 0x02, 0x02, 0x02, 0x3e, 0x40, 0x40, 0x40, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x35 = '5'
	{ 0x00, 0x00, 0x38, 0x04, 0x02, 0x02, 0x3e, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x36 = '6'
	{ 0x00, 0x00, 0x7e, 0x40, 0x40, 0x40, 0x20, 0x10, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00 },	//0x37 = '7'
	{ 0x00, 0x00, 0x3c, 0x42, 0x42, 0x42, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x38 = '8'
	{ 0x00, 0x00, 0x3c, 0x42, 0x42, 0x42, 0x7c, 0x40, 0x40, 0x40, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x39 = '9'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00 },	//0x3a = ':'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x10, 0x08, 0x00, 0x00 },	//0x3b = ';'
	{ 0x00, 0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00, 0x00 },	//0x3c = '<'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//0x3d = '='
	{ 0x00, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00 },	//0x3e = '>'
	{ 0x00, 0x00, 0x3c, 0x42, 0x42, 0x40, 0x20, 0x10, 0x08, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00 },	//0x3f = '?'

	{ 0x00, 0x00, 0x00, 0x3c, 0x42, 0x99, 0xa1, 0xb9, 0xa5, 0x79, 0x02, 0x7c, 0x00, 0x00, 0x00 },	//0x40 = '@'
	{ 0x00, 0x00, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00 },	//0x41 = 'A'
	{ 0x00, 0x00, 0x3e, 0x42, 0x42, 0x42, 0x3e, 0x42, 0x42, 0x42, 0x42, 0x3e, 0x00, 0x00, 0x00 },	//0x42 = 'B'
	{ 0x00, 0x00, 0x3c, 0x42, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x43 = 'C'
	{ 0x00, 0x00, 0x1e, 0x22, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x22, 0x1e, 0x00, 0x00, 0x00 },	//0x44 = 'D'
	{ 0x00, 0x00, 0x7e, 0x02, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x02, 0x7e, 0x00, 0x00, 0x00 },	//0x45 = 'E'
	{ 0x00, 0x00, 0x7e, 0x02, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00 },	//0x46 = 'F'
	{ 0x00, 0x00, 0x3c, 0x42, 0x02, 0x02, 0x02, 0x72, 0x42, 0x42, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x47 = 'G'
	{ 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00 },	//0x48 = 'H'
	{ 0x00, 0x00, 0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3e, 0x00, 0x00, 0x00 },	//0x49 = 'I'
	{ 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x4a = 'J'
	{ 0x00, 0x00, 0x42, 0x42, 0x22, 0x12, 0x0e, 0x12, 0x22, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00 },	//0x4b = 'K'
	{ 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x7e, 0x00, 0x00, 0x00 },	//0x4c = 'L'
	{ 0x00, 0x00, 0x41, 0x63, 0x55, 0x49, 0x49, 0x41, 0x41, 0x41, 0x41, 0x41, 0x00, 0x00, 0x00 },	//0x4d = 'M'
	{ 0x00, 0x00, 0x42, 0x46, 0x4a, 0x52, 0x62, 0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00 },	//0x4e = 'N'
	{ 0x00, 0x00, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x4f = 'O'

	{ 0x00, 0x00, 0x3e, 0x42, 0x42, 0x42, 0x3e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00 },	//0x50 = 'P'
	{ 0x00, 0x00, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x52, 0x62, 0x7c, 0x40, 0x00, 0x00 },	//0x51 = 'Q'
	{ 0x00, 0x00, 0x3e, 0x42, 0x42, 0x42, 0x3e, 0x22, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00 },	//0x52 = 'R'
	{ 0x00, 0x00, 0x3c, 0x42, 0x02, 0x04, 0x18, 0x20, 0x40, 0x40, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x53 = 'S'
	{ 0x00, 0x00, 0x7f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00 },	//0x54 = 'T'
	{ 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x55 = 'U'
	{ 0x00, 0x00, 0x41, 0x41, 0x41, 0x41, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x00, 0x00, 0x00 },	//0x56 = 'V'
	{ 0x00, 0x00, 0x41, 0x41, 0x41, 0x41, 0x49, 0x49, 0x49, 0x55, 0x63, 0x41, 0x00, 0x00, 0x00 },	//0x57 = 'W'
	{ 0x00, 0x00, 0x42, 0x42, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00 },	//0x58 = 'X'
	{ 0x00, 0x00, 0x41, 0x41, 0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00 },	//0x59 = 'Y'
	{ 0x00, 0x00, 0x7e, 0x40, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x7e, 0x00, 0x00, 0x00 },	//0x5a = 'Z'
	{ 0x00, 0x00, 0x1c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1c, 0x00, 0x00 },	//0x5b = '['
	{ 0x00, 0x00, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20, 0x00, 0x00, 0x00 },	//0x5c = '\'
	{ 0x00, 0x00, 0x1c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1c, 0x00, 0x00 },	//0x5d = ']'
	{ 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//0x5e = '^'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00 },	//0x5f = '_'

	{ 0x00, 0x00, 0x08, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//0x60 = '`'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x40, 0x7c, 0x42, 0x42, 0x42, 0x7c, 0x00, 0x00, 0x00 },	//0x61 = 'a'
	{ 0x00, 0x00, 0x02, 0x02, 0x02, 0x3e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3e, 0x00, 0x00, 0x00 },	//0x62 = 'b'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x02, 0x02, 0x02, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x63 = 'c'
	{ 0x00, 0x00, 0x40, 0x40, 0x40, 0x7c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7c, 0x00, 0x00, 0x00 },	//0x64 = 'd
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x7e, 0x02, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x65 = 'e'
	{ 0x00, 0x00, 0x38, 0x44, 0x04, 0x04, 0x1e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00 },	//0x66 = 'f'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x62, 0x5c, 0x40, 0x42, 0x3c },	//0x67 = 'g'
	{ 0x00, 0x00, 0x02, 0x02, 0x02, 0x3e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00 },	//0x68 = 'h'
	{ 0x00, 0x00, 0x00, 0x08, 0x00, 0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3e, 0x00, 0x00, 0x00 },	//0x69 = 'i'
	{ 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x22, 0x1c },	//0x6a = 'j'
	{ 0x00, 0x00, 0x02, 0x02, 0x02, 0x42, 0x42, 0x22, 0x1e, 0x22, 0x42, 0x42, 0x00, 0x00, 0x00 },	//0x6b = 'k'
	{ 0x00, 0x00, 0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3e, 0x00, 0x00, 0x00 },	//0x6c = 'l'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x49, 0x49, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00, 0x00 },	//0x6d = 'm'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00 },	//0x6e = 'n'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x6f = 'o'

	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3e, 0x02, 0x02, 0x02 },	//0x70 = 'p'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7c, 0x40, 0x40, 0x40 },	//0x71 = 'q'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x06, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00 },	//0x72 = 'r'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x02, 0x3c, 0x40, 0x42, 0x3c, 0x00, 0x00, 0x00 },	//0x73 = 's'
	{ 0x00, 0x00, 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x30, 0x00, 0x00, 0x00 },	//0x74 = 't'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7c, 0x00, 0x00, 0x00 },	//0x75 = 'u'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x41, 0x22, 0x22, 0x14, 0x14, 0x08, 0x00, 0x00, 0x00 },	//0x76 = 'v'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x41, 0x49, 0x49, 0x49, 0x55, 0x22, 0x00, 0x00, 0x00 },	//0x77 = 'w'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x22, 0x14, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00 },	//0x78 = 'x'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x62, 0x5c, 0x40, 0x20, 0x1e },	//0x79 = 'y'
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x7e, 0x00, 0x00, 0x00 },	//0x7a = 'z'
	{ 0x00, 0x00, 0x30, 0x08, 0x08, 0x08, 0x08, 0x06, 0x08, 0x08, 0x08, 0x08, 0x30, 0x00, 0x00 },	//0x7b = '{'
	{ 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00 },	//0x7c = '|'
	{ 0x00, 0x00, 0x06, 0x08, 0x08, 0x08, 0x08, 0x30, 0x08, 0x08, 0x08, 0x08, 0x06, 0x00, 0x00 },	//0x7d = '}'
	{ 0x00, 0x00, 0x4c, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }	//0x7e = '~'
};

AMG240160P::AMG240160P(SPI* spi, GPIOPin* csn, GPIOPin* rstn, GPIOPin* ctlData, Timer* usTimer)
	: m_spi(spi)
	, m_csn(csn)
	, m_rstn(rstn)
	, m_ctlData(ctlData)
	, m_usTimer(usTimer)
	, m_writeX(0)
	, m_writeY(0)
{
	//Initialize pins
	csn->Set(1);
	rstn->Set(1);
	ctlData->Set(0);

	//Reset LCD. 10ms low, 10ms high before sending writes
	rstn->Set(0);
	usTimer->Sleep(10000, true);
	rstn->Set(1);
	usTimer->Sleep(10000, true);

	//Initialize the display
	SendCommand(0xe2);	//Soft reset
	SendCommand(0x2b);	//Power control
	SendCommand(0x25);	//Temp compensation
	SendCommand(0xc2);	//LCD mapping control
	SendCommand(0x8b);	//RAM control
	SendCommand(0xd0);	//Color pattern
	SendCommand(0xd6);	//Color mode
	SendCommand(0xdd);	//COM scan function
	SendCommand(0xa1);	//Line rate
	SendCommand(0xeb);	//Bias ratio 1/12

	SendCommand(0x81);	//VBIAS pot
	SendCommand(50);

	SendCommand(0xf1);	//COM End
	SendCommand(159);

	SendCommand(0xC8);	//N-line inversion
	SendCommand(0);

	SendCommand(0x84);	//No partial display
	SendCommand(0xa6);	//No inverse display
	SendCommand(0xaf);	//Enable display in 5-bit grayscale mode

	//Clear the screen
	ClearScreen();
}

void AMG240160P::UpdateScreen()
{
	SendCommand(0x70);	//Row address MSBs
	SendCommand(0x60);	//Row address LSBs
	SendCommand(0x10);	//Col address MSBs
	SendCommand(0x00);	//Col address LSBs

	//X=0 is left, Y=0 is top as seen from MMCX ports
	//Each X coordinate is a block of 3 pixels
	//15:11	f800 = left
	//10:6	07c0 = middle
	//5	dontcare
	//4:0	001f = right
	for(int x=0; x<80; x++)
	{
		for(int y=0; y<160; y++)
		{
			//Default to sending blank pixels
			uint8_t a = 0x00;
			uint8_t b = 0x00;

			//Fetch the data to send for each of our 3 pixels
			//TODO: support intensity grading
			//Rotate by 90 deg
			if(GetPixel(159-y, x*3))
				a |= 0xf8;
			if(GetPixel(159-y, x*3 + 1))
			{
				a |= 0x07;
				b |= 0xc0;
			}
			if(GetPixel(159-y, x*3 + 2))
				b |= 0x1f;

			//Actually send the 3 pixels at once
			SendData(a);
			SendData(b);
		}
	}
}

/**
	@brief Gets the pixel value at a given set of coordinates
 */
bool AMG240160P::GetPixel(unsigned int x, unsigned int y)
{
	//Look up the character cell and the glyph for it
	char ch = m_framebuffer[y/15][x/8];
	CharacterCell8x15 glyph = g_bitmapFont8x16[ch];

	//Cell relative coordinates
	y %= 15;
	x %= 8;

	//Look up the bit of interest
	uint8_t row = glyph.pixels[y];
	if( (row >> x) & 1)
		return true;

	return false;
}

void AMG240160P::SendCommand(uint8_t cmd)
{
	m_ctlData->Set(0);

	m_csn->Set(0);
	m_spi->BlockingWrite(cmd);
	m_spi->WaitForWrites();
	m_csn->Set(1);
}

void AMG240160P::SendData(uint8_t data)
{
	m_ctlData->Set(1);

	m_csn->Set(0);
	m_spi->BlockingWrite(data);
	m_spi->WaitForWrites();
	m_csn->Set(1);
}

void AMG240160P::ClearScreen()
{
	SendCommand(0x70);	//Row address MSBs
	SendCommand(0x60);	//Row address LSBs
	SendCommand(0x10);	//Col address MSBs
	SendCommand(0x00);	//Col address LSBs

	//X=0 is left, Y=0 is top as seen from MMCX ports
	//Each X coordinate is a block of 3 pixels
	//15:11	f800 = left
	//10:6	07c0 = middle
	//5	dontcare
	//4:0	001f = right
	for(int x=0; x<80; x++)
	{
		for(int y=0; y<160; y++)
		{
			SendData(0x00);
			SendData(0x00);
		}
	}

	//Clear the framebuffer
	for(int y=0; y<AMG240160P_FRAMEBUFFER_ROWS; y++)
	{
		for(int x=0; x<AMG240160P_FRAMEBUFFER_COLS; x++)
			m_framebuffer[y][x] = ' ';
	}
}

void AMG240160P::MoveTo(unsigned int x, unsigned int y)
{
	m_writeX = x;
	m_writeY = y;
}

void AMG240160P::PrintBinary(char ch)
{
	//Bounds check coordinates
	if( (m_writeX >= AMG240160P_FRAMEBUFFER_COLS) || (m_writeY >= AMG240160P_FRAMEBUFFER_ROWS) )
		return;

	//Carriage return / newline are special, don't actually write them
	if(ch == '\n')
		m_writeY ++;
	else if(ch == '\r')
		m_writeX = 0;

	//Update the framebuffer
	else
	{
		m_framebuffer[m_writeY][m_writeX] = ch;
		m_writeX ++;
	}

	//Wrap at end of column
	if(m_writeX >= AMG240160P_FRAMEBUFFER_COLS)
	{
		m_writeX = 0;
		m_writeY ++;
	}
}
